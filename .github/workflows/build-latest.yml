name: 🍜 Build/publish runners

on:
  workflow_call:
    inputs:
      runner:
        type: string
        default: '["base", "dind", "2204"]'
      runner-archs:
        type: string
        default: '["amd64", "arm64"]'
      runner-version:
        type: string
        default: 'v2.329.0'
      dockerfiles:
        type: string
        default: '["rootless-ubuntu-jammy-go-empty", "rootless-ubuntu-numbat-go-empty"]'
      runner-arch-map:
        type: string
        default: '[{"amd64":"x86_64", "arm64":"aarch64", "arm":"armv7l"}]'
      registry:
        type: string
        default: 'harbor.nbfc.io'
    secrets:
      GIT_CLONE_PAT:
        required: false
      AWS_ACCESS_KEY:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      HARBOR_USER:
        required: false
      HARBOR_SECRET:
        required: false

jobs:
  build-all:
    runs-on: ${{ format('{0}-{1}', join(fromJSON(inputs.runner), '-'), matrix.arch) }}
    timeout-minutes: 600
    permissions:
      contents: write # for uploading the SBOM to the release
      packages: write # for uploading the finished container
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      id-token: write # to complete the identity challenge with sigstore/fulcio when running outside of PRs
    strategy:
      matrix:
        dockerfile: ["${{ fromJSON(inputs.dockerfiles) }}"]
        arch: ["${{ fromJSON(inputs.runner-archs) }}"]
    continue-on-error: true

    env:
      REGISTRY: ${{ inputs.registry }}
      IMAGE_NAME: ${{ inputs.registry }}/${{ github.repository }}/${{ matrix.dockerfile }}
      ARCH: ${{ matrix.arch }}

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4

      - name: Set short SHA
        run: echo "SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.harbor_user }}
          password: ${{ secrets.harbor_secret }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=${{ env.ARCH }}-
 
      - name: Build and push ${{ matrix.dockerfile }}-${{ matrix.arch}}
        id: build-and-push
        uses: docker/build-push-action@master
        with:
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          #cache-from: type=local,src=/tmp
          #cache-to: type=local,mode=max,dest=/tmp
          #file: ${{ inputs.dockerfile }}
          file: ./${{ matrix.dockerfile }}
          build-arg: |
            HOSTARCH=${{ fromJson(inputs.runner-arch-map)[0][matrix.arch] }}
            RUNNER_VERSION=${{ inputs.runner-version }}
          #build-contexts: |
          # ${{ steps.base-image-calculator.outputs.base_image }}
          provenance: false
 
      - name: Get image digest
        run: |
          echo "IMAGE_DIGEST=$(docker inspect \
          ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.dockerfile }}:${{ env.ARCH }}-${{ env.SHA_SHORT }} | \
          jq -r '.[0].Id')" >> $GITHUB_ENV

      - name: Install cosign
        uses: sigstore/cosign-installer@main

      - name: Sign the published Docker image
        env:
          COSIGN_EXPERIMENTAL: "true"
          DIGEST: ${{steps.build-and-push.outputs.digest}}
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.dockerfile }}@$DIGEST \
          -a "repo=${{github.repository}}" \
          -a "workflow=${{github.workflow}}" \
          -a "ref=${{github.sha}}" \
          -a "author=Nubificus LTD"

  manifest:
    needs: [build-all]
    runs-on: base-dind-2204-amd64 # use the GitHub-hosted runner to build the image
    permissions:
      contents: write # for uploading the SBOM to the release
      packages: write # for uploading the finished container
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      id-token: write # to complete the identity challenge with sigstore/fulcio when running outside of PRs
    strategy:
      matrix:
        dockerfile: ["${{ fromJSON(inputs.dockerfiles) }}"] 
    env:
      REGISTRY: ${{ inputs.registry }}
      TAG: generic

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4

      - name: Set short SHA
        run: echo "SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Log into registry ${{ inputs.REGISTRY }}
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.harbor_user }}
          password: ${{ secrets.harbor_secret }}

#      - name: Create manifest
#        id: create-manifest
#        run: |
#                runner_archs=${{ inputs.runner-archs }}
#                amend_command=""
#                for arch in $( echo $runner_archs  | jq -r '.[]' ); do
#                  amend_image=$(echo " --amend" ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.dockerfile }}:$arch-${{ env.SHA_SHORT }}) ;
#                  amend_command="$amend_image$amend_command";
#                done
#                echo "-------------------- amend command -------------------"
#                echo $amend_command
#
#                docker manifest create ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.dockerfile }}:${{ env.TAG }} \
#                  $(echo $amend_command)
#                VAR=`docker manifest push ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.dockerfile }}:${{ env.TAG }} | tail -1`
#                echo "manifest_sha=$VAR" >> "$GITHUB_OUTPUT"

      - name: Process runner architectures and create docker manifest
        id: create-manifest
        run: |
          runner_archs='${{ inputs.runner-archs }}'  # Using the input string array
          amend_command=""

          # Loop over the architectures and build the amend command
          for arch in $(echo $runner_archs | jq -r '.[]'); do
            amend_command+=" --amend ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.dockerfile }}:$arch-${{ env.SHA_SHORT }}"
          done

          echo "-------------------- Amend command constructed -------------------"
          echo "$amend_command"

          # Create the docker manifest with the amend command
          docker manifest create ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.dockerfile }}:${{ env.TAG }} $amend_command

          # Optionally push the manifest (comment out if not needed)
          #          docker manifest push ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.dockerfile }}:${{ env.TAG }}
          VAR=`docker manifest push ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.dockerfile }}:${{ env.TAG }} | tail -1`
          echo "manifest_sha=$VAR" >> "$GITHUB_OUTPUT"

      - name: Install cosign
        uses: sigstore/cosign-installer@main

      - name: Sign the published Docker image
        env:
          COSIGN_EXPERIMENTAL: "true"
          DIGEST: ${{steps.create-manifest.outputs.manifest_sha }}
        # run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}
        run: |
          #cosign sign --yes harbor.nbfc.io/nubificus/${{ github.repository }}/${{ matrix.dockerfile }}:${{ env.ARCH }}-${{ env.SHA_SHORT }}@$DIGEST \
          cosign sign --yes ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.dockerfile }}@$DIGEST \
          -a "repo=${{github.repository}}" \
          -a "workflow=${{github.workflow}}" \
          -a "ref=${{github.sha}}" \
          -a "author=Nubificus LTD"
